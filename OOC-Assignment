#!/usr/bin/env python

#### conda activate bgmp_py310 

#1. A list of classes you might need for OOP Motif Mark (in English, not code)

# Motif: will include information like length of motif, the different bases if degenerate, functions will include, getting the length, how to determine degenerate bases, 
# Fasta: will include the sequence, a way to distinguish between the introns and exons, where the motif is after it has interacted with the motif 
# Maybe an "image" class? this will take the information from the motif and the fasta in order to create the image with pycairo. 

#2.  How those classes might interact (in English, not code)

# the fasta and motif will interact with a find_motif function. 
# if I go with the image class, this will take information from the fasta and the motif in order to create the picture 


#3. Working code to generate a line and a rectangle, not at the origin, using pycairo (NOT a jupyter notebook)

import cairo 
import math

width,height =  400, 100

surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width,height)
context = cairo.Context(surface)

context.set_line_width(5)

context.move_to(0,50) #(x,y)
context.line_to(400,50)
context.stroke()

context.rectangle(100,25,200,50)    #(x0,y0,x1,y1)
context.fill()

surface.write_to_png("cairo_example.png")


# 4. The image that your code created
#     see attached, cairo_example.png